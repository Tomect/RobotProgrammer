
drive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000005fc  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fc  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800100  00800100  00000690  2**0
                  ALLOC
  3 .noinit       00000000  0080017d  0080017d  00000690  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000690  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000001b3  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000038b  00000000  00000000  00000c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000115  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000004a7  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000001c6  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e <__vector_18>
  4c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  54:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  58:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  5c:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  60:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>
  64:	0c 94 4f 00 	jmp	0x9e <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0c 94 b3 02 	jmp	0x566 <main>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0x0 <__vectors>

000000a2 <Commands>:
}

void Commands()
{
	switch (command)
  a2:	80 91 0a 01 	lds	r24, 0x010A
  a6:	90 91 0b 01 	lds	r25, 0x010B
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	91 05       	cpc	r25, r1
  ae:	c1 f1       	breq	.+112    	; 0x120 <Commands+0x7e>
  b0:	84 30       	cpi	r24, 0x04	; 4
  b2:	91 05       	cpc	r25, r1
  b4:	4c f4       	brge	.+18     	; 0xc8 <Commands+0x26>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	91 f1       	breq	.+100    	; 0x120 <Commands+0x7e>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	c4 f4       	brge	.+48     	; 0xf2 <Commands+0x50>
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	69 f0       	breq	.+26     	; 0xe0 <Commands+0x3e>
  c6:	44 c0       	rjmp	.+136    	; 0x150 <Commands+0xae>
  c8:	85 30       	cpi	r24, 0x05	; 5
  ca:	91 05       	cpc	r25, r1
  cc:	49 f1       	breq	.+82     	; 0x120 <Commands+0x7e>
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	91 05       	cpc	r25, r1
  d2:	7c f0       	brlt	.+30     	; 0xf2 <Commands+0x50>
  d4:	86 30       	cpi	r24, 0x06	; 6
  d6:	91 05       	cpc	r25, r1
  d8:	61 f0       	breq	.+24     	; 0xf2 <Commands+0x50>
  da:	07 97       	sbiw	r24, 0x07	; 7
  dc:	09 f1       	breq	.+66     	; 0x120 <Commands+0x7e>
  de:	38 c0       	rjmp	.+112    	; 0x150 <Commands+0xae>
	{
		case 0 :
			turn_angle 		= 0;
  e0:	90 93 09 01 	sts	0x0109, r25
  e4:	80 93 08 01 	sts	0x0108, r24
			turn_direction	= 0;
  e8:	90 93 07 01 	sts	0x0107, r25
  ec:	80 93 06 01 	sts	0x0106, r24
  f0:	08 c0       	rjmp	.+16     	; 0x102 <Commands+0x60>
			drive_distance 	= 100;
			speed		 	= -200;
			turning 		= 0;
			break;
		case 1 :
			turn_angle 		= 90;
			turn_direction	= RadCW;
			drive_distance 	= 0;
			speed		 	= 0;
			turning 		= 1;
			break;
		case 2 :
			turn_angle 		= 0;
  f2:	10 92 09 01 	sts	0x0109, r1
  f6:	10 92 08 01 	sts	0x0108, r1
			turn_direction	= 0;
  fa:	10 92 07 01 	sts	0x0107, r1
  fe:	10 92 06 01 	sts	0x0106, r1
			drive_distance 	= 100;
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 05 01 	sts	0x0105, r25
 10a:	80 93 04 01 	sts	0x0104, r24
			speed		 	= -200;
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	90 93 03 01 	sts	0x0103, r25
 116:	80 93 02 01 	sts	0x0102, r24
			turning 		= 0;
 11a:	10 92 01 01 	sts	0x0101, r1
			break;
 11e:	08 95       	ret
		case 3 :
			turn_angle 		= 90;
			turn_direction	= RadCW;
			drive_distance 	= 0;
			speed		 	= 0;
			turning 		= 1;
			break;
		case 4 :
			turn_angle 		= 0;
			turn_direction	= 0;
			drive_distance 	= 100;
			speed		 	= -200;
			turning 		= 0;
			break;
		case 5 :
			turn_angle 		= 90;
			turn_direction	= RadCW;
			drive_distance 	= 0;
			speed		 	= 0;
			turning 		= 1;
			break;
		case 6 :
			turn_angle 		= 0;
			turn_direction	= 0;
			drive_distance 	= 100;
			speed		 	= -200;
			turning 		= 0;
			break;
		case 7 :
			turn_angle 		= 90;
 120:	8a e5       	ldi	r24, 0x5A	; 90
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 09 01 	sts	0x0109, r25
 128:	80 93 08 01 	sts	0x0108, r24
			turn_direction	= RadCW;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	90 93 07 01 	sts	0x0107, r25
 134:	80 93 06 01 	sts	0x0106, r24
			drive_distance 	= 0;
 138:	10 92 05 01 	sts	0x0105, r1
 13c:	10 92 04 01 	sts	0x0104, r1
			speed		 	= 0;
 140:	10 92 03 01 	sts	0x0103, r1
 144:	10 92 02 01 	sts	0x0102, r1
			turning 		= 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 01 01 	sts	0x0101, r24
			break;
 14e:	08 95       	ret
			
		default:
			// End the robots run
			command = -1;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	9f ef       	ldi	r25, 0xFF	; 255
 154:	90 93 0b 01 	sts	0x010B, r25
 158:	80 93 0a 01 	sts	0x010A, r24
 15c:	08 95       	ret

0000015e <__vector_18>:
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 170:	90 91 c6 00 	lds	r25, 0x00C6
 174:	80 91 11 01 	lds	r24, 0x0111
 178:	88 23       	and	r24, r24
 17a:	81 f0       	breq	.+32     	; 0x19c <__vector_18+0x3e>
 17c:	80 91 10 01 	lds	r24, 0x0110
 180:	e8 2f       	mov	r30, r24
 182:	ff 27       	eor	r31, r31
 184:	eb 5e       	subi	r30, 0xEB	; 235
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	90 83       	st	Z, r25
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 10 01 	sts	0x0110, r24
 190:	80 91 10 01 	lds	r24, 0x0110
 194:	84 33       	cpi	r24, 0x34	; 52
 196:	10 f0       	brcs	.+4      	; 0x19c <__vector_18+0x3e>
 198:	10 92 11 01 	sts	0x0111, r1
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <__vector_11>:
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	80 91 13 01 	lds	r24, 0x0113
 1c0:	90 91 14 01 	lds	r25, 0x0114
 1c4:	89 2b       	or	r24, r25
 1c6:	51 f0       	breq	.+20     	; 0x1dc <__vector_11+0x2e>
 1c8:	80 91 13 01 	lds	r24, 0x0113
 1cc:	90 91 14 01 	lds	r25, 0x0114
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	90 93 14 01 	sts	0x0114, r25
 1d6:	80 93 13 01 	sts	0x0113, r24
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <__vector_11+0x32>
 1dc:	10 92 12 01 	sts	0x0112, r1
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <ByteTx>:
 1ee:	98 2f       	mov	r25, r24
 1f0:	80 91 c0 00 	lds	r24, 0x00C0
 1f4:	85 ff       	sbrs	r24, 5
 1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <ByteTx+0x2>
 1f8:	90 93 c6 00 	sts	0x00C6, r25
 1fc:	08 95       	ret

000001fe <Stop>:
			break;
	}
}

// Stop the robot from driving
void Stop()
{
	ByteTx(CmdDrive);
 1fe:	89 e8       	ldi	r24, 0x89	; 137
 200:	0e 94 f7 00 	call	0x1ee <ByteTx>
	ByteTx((uint8_t)((0 >> 8) & 0x00FF));
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 f7 00 	call	0x1ee <ByteTx>
	ByteTx((uint8_t)(0 & 0x00FF));
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 f7 00 	call	0x1ee <ByteTx>
	ByteTx((uint8_t)((RadStraight >> 8) & 0x00FF));
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	0e 94 f7 00 	call	0x1ee <ByteTx>
	ByteTx((uint8_t)(RadStraight & 0x00FF));
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 f7 00 	call	0x1ee <ByteTx>
 21c:	08 95       	ret

0000021e <DelayAndUpdateSensors>:
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	20 93 12 01 	sts	0x0112, r18
 224:	90 93 14 01 	sts	0x0114, r25
 228:	80 93 13 01 	sts	0x0113, r24
 22c:	80 91 12 01 	lds	r24, 0x0112
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <DelayAndUpdateSensors+0x18>
 234:	42 c0       	rjmp	.+132    	; 0x2ba <DelayAndUpdateSensors+0x9c>
 236:	80 91 11 01 	lds	r24, 0x0111
 23a:	88 23       	and	r24, r24
 23c:	b9 f7       	brne	.-18     	; 0x22c <DelayAndUpdateSensors+0xe>
 23e:	a5 e1       	ldi	r26, 0x15	; 21
 240:	b1 e0       	ldi	r27, 0x01	; 1
 242:	e9 e4       	ldi	r30, 0x49	; 73
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	93 e3       	ldi	r25, 0x33	; 51
 248:	8d 91       	ld	r24, X+
 24a:	81 93       	st	Z+, r24
 24c:	91 50       	subi	r25, 0x01	; 1
 24e:	97 ff       	sbrs	r25, 7
 250:	fb cf       	rjmp	.-10     	; 0x248 <DelayAndUpdateSensors+0x2a>
 252:	80 91 55 01 	lds	r24, 0x0155
 256:	99 27       	eor	r25, r25
 258:	38 2f       	mov	r19, r24
 25a:	22 27       	eor	r18, r18
 25c:	80 91 56 01 	lds	r24, 0x0156
 260:	99 27       	eor	r25, r25
 262:	28 2b       	or	r18, r24
 264:	39 2b       	or	r19, r25
 266:	80 91 0e 01 	lds	r24, 0x010E
 26a:	90 91 0f 01 	lds	r25, 0x010F
 26e:	82 0f       	add	r24, r18
 270:	93 1f       	adc	r25, r19
 272:	90 93 0f 01 	sts	0x010F, r25
 276:	80 93 0e 01 	sts	0x010E, r24
 27a:	80 91 57 01 	lds	r24, 0x0157
 27e:	99 27       	eor	r25, r25
 280:	38 2f       	mov	r19, r24
 282:	22 27       	eor	r18, r18
 284:	80 91 58 01 	lds	r24, 0x0158
 288:	99 27       	eor	r25, r25
 28a:	28 2b       	or	r18, r24
 28c:	39 2b       	or	r19, r25
 28e:	80 91 0c 01 	lds	r24, 0x010C
 292:	90 91 0d 01 	lds	r25, 0x010D
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	90 93 0d 01 	sts	0x010D, r25
 29e:	80 93 0c 01 	sts	0x010C, r24
 2a2:	8e e8       	ldi	r24, 0x8E	; 142
 2a4:	0e 94 f7 00 	call	0x1ee <ByteTx>
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	0e 94 f7 00 	call	0x1ee <ByteTx>
 2ae:	10 92 10 01 	sts	0x0110, r1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 11 01 	sts	0x0111, r24
 2b8:	b9 cf       	rjmp	.-142    	; 0x22c <DelayAndUpdateSensors+0xe>
 2ba:	08 95       	ret

000002bc <DelayMs>:
 2bc:	9c 01       	movw	r18, r24
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 12 01 	sts	0x0112, r24
 2c4:	30 93 14 01 	sts	0x0114, r19
 2c8:	20 93 13 01 	sts	0x0113, r18
 2cc:	80 91 12 01 	lds	r24, 0x0112
 2d0:	88 23       	and	r24, r24
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <DelayMs+0x10>
 2d4:	08 95       	ret

000002d6 <PowerOnRobot>:
 2d6:	1d 99       	sbic	0x03, 5	; 3
 2d8:	13 c0       	rjmp	.+38     	; 0x300 <PowerOnRobot+0x2a>
 2da:	1d 99       	sbic	0x03, 5	; 3
 2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <PowerOnRobot+0x22>
 2de:	5f 98       	cbi	0x0b, 7	; 11
 2e0:	84 ef       	ldi	r24, 0xF4	; 244
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 5e 01 	call	0x2bc <DelayMs>
 2e8:	5f 9a       	sbi	0x0b, 7	; 11
 2ea:	84 e6       	ldi	r24, 0x64	; 100
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 5e 01 	call	0x2bc <DelayMs>
 2f2:	5f 98       	cbi	0x0b, 7	; 11
 2f4:	1d 9b       	sbis	0x03, 5	; 3
 2f6:	f3 cf       	rjmp	.-26     	; 0x2de <PowerOnRobot+0x8>
 2f8:	8c ea       	ldi	r24, 0xAC	; 172
 2fa:	9d e0       	ldi	r25, 0x0D	; 13
 2fc:	0e 94 5e 01 	call	0x2bc <DelayMs>
 300:	08 95       	ret

00000302 <Baud>:
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
 306:	8c 30       	cpi	r24, 0x0C	; 12
 308:	08 f0       	brcs	.+2      	; 0x30c <Baud+0xa>
 30a:	54 c0       	rjmp	.+168    	; 0x3b4 <Baud+0xb2>
 30c:	81 e8       	ldi	r24, 0x81	; 129
 30e:	0e 94 f7 00 	call	0x1ee <ByteTx>
 312:	80 91 c0 00 	lds	r24, 0x00C0
 316:	80 64       	ori	r24, 0x40	; 64
 318:	80 93 c0 00 	sts	0x00C0, r24
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 f7 00 	call	0x1ee <ByteTx>
 322:	80 91 c0 00 	lds	r24, 0x00C0
 326:	86 ff       	sbrs	r24, 6
 328:	fc cf       	rjmp	.-8      	; 0x322 <Baud+0x20>
 32a:	f8 94       	cli
 32c:	cb 30       	cpi	r28, 0x0B	; 11
 32e:	19 f4       	brne	.+6      	; 0x336 <Baud+0x34>
 330:	89 e0       	ldi	r24, 0x09	; 9
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	36 c0       	rjmp	.+108    	; 0x3a2 <Baud+0xa0>
 336:	ca 30       	cpi	r28, 0x0A	; 10
 338:	19 f4       	brne	.+6      	; 0x340 <Baud+0x3e>
 33a:	83 e1       	ldi	r24, 0x13	; 19
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	31 c0       	rjmp	.+98     	; 0x3a2 <Baud+0xa0>
 340:	c9 30       	cpi	r28, 0x09	; 9
 342:	19 f4       	brne	.+6      	; 0x34a <Baud+0x48>
 344:	8d e1       	ldi	r24, 0x1D	; 29
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	2c c0       	rjmp	.+88     	; 0x3a2 <Baud+0xa0>
 34a:	c8 30       	cpi	r28, 0x08	; 8
 34c:	19 f4       	brne	.+6      	; 0x354 <Baud+0x52>
 34e:	87 e2       	ldi	r24, 0x27	; 39
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	27 c0       	rjmp	.+78     	; 0x3a2 <Baud+0xa0>
 354:	c7 30       	cpi	r28, 0x07	; 7
 356:	19 f4       	brne	.+6      	; 0x35e <Baud+0x5c>
 358:	8b e3       	ldi	r24, 0x3B	; 59
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	22 c0       	rjmp	.+68     	; 0x3a2 <Baud+0xa0>
 35e:	c6 30       	cpi	r28, 0x06	; 6
 360:	19 f4       	brne	.+6      	; 0x368 <Baud+0x66>
 362:	8f e4       	ldi	r24, 0x4F	; 79
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	1d c0       	rjmp	.+58     	; 0x3a2 <Baud+0xa0>
 368:	c5 30       	cpi	r28, 0x05	; 5
 36a:	19 f4       	brne	.+6      	; 0x372 <Baud+0x70>
 36c:	87 e7       	ldi	r24, 0x77	; 119
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	18 c0       	rjmp	.+48     	; 0x3a2 <Baud+0xa0>
 372:	c4 30       	cpi	r28, 0x04	; 4
 374:	19 f4       	brne	.+6      	; 0x37c <Baud+0x7a>
 376:	8f ee       	ldi	r24, 0xEF	; 239
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	13 c0       	rjmp	.+38     	; 0x3a2 <Baud+0xa0>
 37c:	c3 30       	cpi	r28, 0x03	; 3
 37e:	19 f4       	brne	.+6      	; 0x386 <Baud+0x84>
 380:	8f ed       	ldi	r24, 0xDF	; 223
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	0e c0       	rjmp	.+28     	; 0x3a2 <Baud+0xa0>
 386:	c2 30       	cpi	r28, 0x02	; 2
 388:	19 f4       	brne	.+6      	; 0x390 <Baud+0x8e>
 38a:	8f eb       	ldi	r24, 0xBF	; 191
 38c:	93 e0       	ldi	r25, 0x03	; 3
 38e:	09 c0       	rjmp	.+18     	; 0x3a2 <Baud+0xa0>
 390:	c1 30       	cpi	r28, 0x01	; 1
 392:	19 f4       	brne	.+6      	; 0x39a <Baud+0x98>
 394:	8f e7       	ldi	r24, 0x7F	; 127
 396:	97 e0       	ldi	r25, 0x07	; 7
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <Baud+0xa0>
 39a:	cc 23       	and	r28, r28
 39c:	31 f4       	brne	.+12     	; 0x3aa <Baud+0xa8>
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	9e e0       	ldi	r25, 0x0E	; 14
 3a2:	90 93 c5 00 	sts	0x00C5, r25
 3a6:	80 93 c4 00 	sts	0x00C4, r24
 3aa:	78 94       	sei
 3ac:	84 e6       	ldi	r24, 0x64	; 100
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 5e 01 	call	0x2bc <DelayMs>
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <Initialise>:
 3b8:	f8 94       	cli
 3ba:	80 e1       	ldi	r24, 0x10	; 16
 3bc:	84 b9       	out	0x04, r24	; 4
 3be:	8f ec       	ldi	r24, 0xCF	; 207
 3c0:	85 b9       	out	0x05, r24	; 5
 3c2:	17 b8       	out	0x07, r1	; 7
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	86 ee       	ldi	r24, 0xE6	; 230
 3ca:	8a b9       	out	0x0a, r24	; 10
 3cc:	8d e7       	ldi	r24, 0x7D	; 125
 3ce:	8b b9       	out	0x0b, r24	; 11
 3d0:	10 92 80 00 	sts	0x0080, r1
 3d4:	8c e0       	ldi	r24, 0x0C	; 12
 3d6:	80 93 81 00 	sts	0x0081, r24
 3da:	87 e4       	ldi	r24, 0x47	; 71
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	90 93 89 00 	sts	0x0089, r25
 3e2:	80 93 88 00 	sts	0x0088, r24
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	80 93 6f 00 	sts	0x006F, r24
 3ec:	83 e1       	ldi	r24, 0x13	; 19
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	90 93 c5 00 	sts	0x00C5, r25
 3f4:	80 93 c4 00 	sts	0x00C4, r24
 3f8:	88 e9       	ldi	r24, 0x98	; 152
 3fa:	80 93 c1 00 	sts	0x00C1, r24
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	80 93 c2 00 	sts	0x00C2, r24
 404:	78 94       	sei
 406:	8b b1       	in	r24, 0x0b	; 11
 408:	80 66       	ori	r24, 0x60	; 96
 40a:	8b b9       	out	0x0b, r24	; 11
 40c:	0e 94 6b 01 	call	0x2d6 <PowerOnRobot>
 410:	80 e8       	ldi	r24, 0x80	; 128
 412:	0e 94 f7 00 	call	0x1ee <ByteTx>
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	0e 94 81 01 	call	0x302 <Baud>
 41c:	82 e8       	ldi	r24, 0x82	; 130
 41e:	0e 94 f7 00 	call	0x1ee <ByteTx>
 422:	84 e8       	ldi	r24, 0x84	; 132
 424:	0e 94 f7 00 	call	0x1ee <ByteTx>
 428:	08 95       	ret

0000042a <Drive_Wheels>:
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	8c 01       	movw	r16, r24
 434:	7b 01       	movw	r14, r22
 436:	89 e8       	ldi	r24, 0x89	; 137
 438:	0e 94 f7 00 	call	0x1ee <ByteTx>
 43c:	81 2f       	mov	r24, r17
 43e:	99 27       	eor	r25, r25
 440:	87 fd       	sbrc	r24, 7
 442:	9a 95       	dec	r25
 444:	0e 94 f7 00 	call	0x1ee <ByteTx>
 448:	80 2f       	mov	r24, r16
 44a:	0e 94 f7 00 	call	0x1ee <ByteTx>
 44e:	8f 2d       	mov	r24, r15
 450:	99 27       	eor	r25, r25
 452:	87 fd       	sbrc	r24, 7
 454:	9a 95       	dec	r25
 456:	0e 94 f7 00 	call	0x1ee <ByteTx>
 45a:	8e 2d       	mov	r24, r14
 45c:	0e 94 f7 00 	call	0x1ee <ByteTx>
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	08 95       	ret

0000046a <FinishedCommand>:
}

// move onto the next command
void FinishedCommand()
{
	// Reset the driving variables
	turn_angle 		= 0;
 46a:	10 92 09 01 	sts	0x0109, r1
 46e:	10 92 08 01 	sts	0x0108, r1
	turn_direction	= 0;
 472:	10 92 07 01 	sts	0x0107, r1
 476:	10 92 06 01 	sts	0x0106, r1
	drive_distance 	= 0;
 47a:	10 92 05 01 	sts	0x0105, r1
 47e:	10 92 04 01 	sts	0x0104, r1
	speed		 	= 0;
 482:	10 92 03 01 	sts	0x0103, r1
 486:	10 92 02 01 	sts	0x0102, r1
	turning 		= 0;
 48a:	10 92 01 01 	sts	0x0101, r1
	interuptEvent	= 0;
 48e:	10 92 00 01 	sts	0x0100, r1
	
	distance = 0;
 492:	10 92 0f 01 	sts	0x010F, r1
 496:	10 92 0e 01 	sts	0x010E, r1
	angle = 0;
 49a:	10 92 0d 01 	sts	0x010D, r1
 49e:	10 92 0c 01 	sts	0x010C, r1
	
	// Increment to the next command
	command++;
 4a2:	80 91 0a 01 	lds	r24, 0x010A
 4a6:	90 91 0b 01 	lds	r25, 0x010B
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	90 93 0b 01 	sts	0x010B, r25
 4b0:	80 93 0a 01 	sts	0x010A, r24
	
	// Setup for the next command
	Commands();
 4b4:	0e 94 51 00 	call	0xa2 <Commands>
 4b8:	08 95       	ret

000004ba <Drive>:
}

// Manage the moving of the robot
void Drive()
{
	// If the robot is turning, manage the turn
	if(turning)
 4ba:	80 91 01 01 	lds	r24, 0x0101
 4be:	88 23       	and	r24, r24
 4c0:	71 f1       	breq	.+92     	; 0x51e <__stack+0x1f>
	{
		if(turn_direction)
 4c2:	80 91 06 01 	lds	r24, 0x0106
 4c6:	90 91 07 01 	lds	r25, 0x0107
 4ca:	89 2b       	or	r24, r25
 4cc:	81 f0       	breq	.+32     	; 0x4ee <Drive+0x34>
		{
		  if(angle > turn_angle)
 4ce:	20 91 0c 01 	lds	r18, 0x010C
 4d2:	30 91 0d 01 	lds	r19, 0x010D
 4d6:	80 91 08 01 	lds	r24, 0x0108
 4da:	90 91 09 01 	lds	r25, 0x0109
 4de:	82 17       	cp	r24, r18
 4e0:	93 07       	cpc	r25, r19
 4e2:	14 f4       	brge	.+4      	; 0x4e8 <Drive+0x2e>
			FinishedCommand();
 4e4:	0e 94 35 02 	call	0x46a <FinishedCommand>
			
		  Drive_Wheels(200, RadCCW);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	70 e0       	ldi	r23, 0x00	; 0
 4ec:	13 c0       	rjmp	.+38     	; 0x514 <__stack+0x15>
		}
		else
		{
		  if((-angle) > turn_angle)
 4ee:	80 91 0c 01 	lds	r24, 0x010C
 4f2:	90 91 0d 01 	lds	r25, 0x010D
 4f6:	22 27       	eor	r18, r18
 4f8:	33 27       	eor	r19, r19
 4fa:	28 1b       	sub	r18, r24
 4fc:	39 0b       	sbc	r19, r25
 4fe:	80 91 08 01 	lds	r24, 0x0108
 502:	90 91 09 01 	lds	r25, 0x0109
 506:	82 17       	cp	r24, r18
 508:	93 07       	cpc	r25, r19
 50a:	14 f4       	brge	.+4      	; 0x510 <__stack+0x11>
			FinishedCommand();
 50c:	0e 94 35 02 	call	0x46a <FinishedCommand>
			
		  Drive_Wheels(200, RadCW);
 510:	6f ef       	ldi	r22, 0xFF	; 255
 512:	7f ef       	ldi	r23, 0xFF	; 255
 514:	88 ec       	ldi	r24, 0xC8	; 200
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 15 02 	call	0x42a <Drive_Wheels>
 51c:	08 95       	ret
		}
	}
	else
	{
		// Drive Forward
		if(speed > 0)
 51e:	80 91 02 01 	lds	r24, 0x0102
 522:	90 91 03 01 	lds	r25, 0x0103
 526:	18 16       	cp	r1, r24
 528:	19 06       	cpc	r1, r25
 52a:	2c f4       	brge	.+10     	; 0x536 <__stack+0x37>
		{
			if(distance > drive_distance)
 52c:	20 91 0e 01 	lds	r18, 0x010E
 530:	30 91 0f 01 	lds	r19, 0x010F
 534:	08 c0       	rjmp	.+16     	; 0x546 <__stack+0x47>
				FinishedCommand();
				
            Drive_Wheels(speed, RadStraight);
		}
		// Drive Backwards
		else
		{
			if((-distance) > drive_distance)
 536:	80 91 0e 01 	lds	r24, 0x010E
 53a:	90 91 0f 01 	lds	r25, 0x010F
 53e:	22 27       	eor	r18, r18
 540:	33 27       	eor	r19, r19
 542:	28 1b       	sub	r18, r24
 544:	39 0b       	sbc	r19, r25
 546:	80 91 04 01 	lds	r24, 0x0104
 54a:	90 91 05 01 	lds	r25, 0x0105
 54e:	82 17       	cp	r24, r18
 550:	93 07       	cpc	r25, r19
 552:	14 f4       	brge	.+4      	; 0x558 <__stack+0x59>
				FinishedCommand();
 554:	0e 94 35 02 	call	0x46a <FinishedCommand>
				
            Drive_Wheels(speed, RadStraight);
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e8       	ldi	r23, 0x80	; 128
 55c:	80 91 02 01 	lds	r24, 0x0102
 560:	90 91 03 01 	lds	r25, 0x0103
 564:	d9 cf       	rjmp	.-78     	; 0x518 <__stack+0x19>

00000566 <main>:
 566:	cf ef       	ldi	r28, 0xFF	; 255
 568:	d4 e0       	ldi	r29, 0x04	; 4
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	cd bf       	out	0x3d, r28	; 61
 56e:	0e 94 dc 01 	call	0x3b8 <Initialise>
 572:	0e 94 ff 00 	call	0x1fe <Stop>
 576:	c1 e0       	ldi	r28, 0x01	; 1
 578:	d0 e0       	ldi	r29, 0x00	; 0
 57a:	8b b1       	in	r24, 0x0b	; 11
 57c:	8f 79       	andi	r24, 0x9F	; 159
 57e:	8b b9       	out	0x0b, r24	; 11
 580:	84 ef       	ldi	r24, 0xF4	; 244
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 0f 01 	call	0x21e <DelayAndUpdateSensors>
 588:	8b b1       	in	r24, 0x0b	; 11
 58a:	80 66       	ori	r24, 0x60	; 96
 58c:	8b b9       	out	0x0b, r24	; 11
 58e:	84 ef       	ldi	r24, 0xF4	; 244
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 0f 01 	call	0x21e <DelayAndUpdateSensors>
 596:	21 97       	sbiw	r28, 0x01	; 1
 598:	d7 ff       	sbrs	r29, 7
 59a:	ef cf       	rjmp	.-34     	; 0x57a <main+0x14>
 59c:	84 ef       	ldi	r24, 0xF4	; 244
 59e:	91 e0       	ldi	r25, 0x01	; 1
 5a0:	0e 94 0f 01 	call	0x21e <DelayAndUpdateSensors>
 5a4:	0e 94 51 00 	call	0xa2 <Commands>
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <main+0x50>
 5aa:	0e 94 5d 02 	call	0x4ba <Drive>
 5ae:	84 e1       	ldi	r24, 0x14	; 20
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 0f 01 	call	0x21e <DelayAndUpdateSensors>
 5b6:	4c 9b       	sbis	0x09, 4	; 9
 5b8:	1a c0       	rjmp	.+52     	; 0x5ee <main+0x88>
 5ba:	80 91 4b 01 	lds	r24, 0x014B
 5be:	88 23       	and	r24, r24
 5c0:	b1 f4       	brne	.+44     	; 0x5ee <main+0x88>
 5c2:	80 91 4c 01 	lds	r24, 0x014C
 5c6:	88 23       	and	r24, r24
 5c8:	91 f4       	brne	.+36     	; 0x5ee <main+0x88>
 5ca:	80 91 4d 01 	lds	r24, 0x014D
 5ce:	88 23       	and	r24, r24
 5d0:	71 f4       	brne	.+28     	; 0x5ee <main+0x88>
 5d2:	80 91 4e 01 	lds	r24, 0x014E
 5d6:	88 23       	and	r24, r24
 5d8:	51 f4       	brne	.+20     	; 0x5ee <main+0x88>
 5da:	80 91 70 01 	lds	r24, 0x0170
 5de:	88 23       	and	r24, r24
 5e0:	31 f4       	brne	.+12     	; 0x5ee <main+0x88>
 5e2:	80 91 0a 01 	lds	r24, 0x010A
 5e6:	90 91 0b 01 	lds	r25, 0x010B
 5ea:	99 23       	and	r25, r25
 5ec:	f4 f6       	brge	.-68     	; 0x5aa <main+0x44>
 5ee:	0e 94 ff 00 	call	0x1fe <Stop>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0c 94 fd 02 	jmp	0x5fa <_exit>

000005fa <_exit>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <_exit>
